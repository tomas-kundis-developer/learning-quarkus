package quarkus.accounts;

import static com.mongodb.client.model.Filters.eq;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import java.util.ArrayList;
import java.util.List;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import lombok.NonNull;
import org.bson.Document;
import org.bson.types.Decimal128;
import org.eclipse.microprofile.config.inject.ConfigProperty;


/**
 * Repository for {@link AccountNoSql} db entity.
 *
 * <p>This implementation use only MongoDB Java driver API. It not uses mappers, or autogenerated repository methods.
 */
@ApplicationScoped
public class AccountNoSqlRepository {

  private static final String ACCOUNT_TABLE = "account";

  private static final String ACCOUNT_NUMBER_COL = "accountNumber";

  @Inject
  MongoClient mongoClient;

  @ConfigProperty(name = "account-service.mongodb.database-name")
  private String dbName;

  public List<AccountNoSql> findAll() {
    List<AccountNoSql> accounts = new ArrayList<>();

    try (MongoCursor<Document> cursor = getCollection().find().iterator()) {
      while (cursor.hasNext()) {
        Document document = cursor.next();
        AccountNoSql account = mapDocumentToAccountNoSql(document);
        accounts.add(account);
      }
    }

    return accounts;
  }

  public AccountNoSql findByAccountNumber(@NonNull Long accountNumber) {
    Document document = getCollection().find(eq(ACCOUNT_NUMBER_COL, accountNumber)).first();

    if (document == null) {
      return null;
    }

    return mapDocumentToAccountNoSql(document);
  }

  public void insert(AccountNoSql account) {
    Document document = mapAccountNoSqlToDocument(account);

    getCollection().insertOne(document);
  }

  public void replace(AccountNoSql account) {
    Document replaceDocument = mapAccountNoSqlToDocument(account);

    getCollection().replaceOne(eq(ACCOUNT_NUMBER_COL, account.getAccountNumber()), replaceDocument);
  }

  private MongoCollection<Document> getCollection() {
    return mongoClient.getDatabase(dbName).getCollection(ACCOUNT_TABLE);
  }

  private Document mapAccountNoSqlToDocument(@NonNull AccountNoSql account) {
    return new Document()
        .append("id", account.get_id())
        .append(ACCOUNT_NUMBER_COL, account.getAccountNumber())
        .append("customerNumber", account.getCustomerNumber())
        .append("customerName", account.getCustomerName())
        .append("balance", account.getBalance())
        .append("accountStatus", account.getAccountStatus());
  }

  private AccountNoSql mapDocumentToAccountNoSql(@NonNull Document document) {
    AccountNoSql account = new AccountNoSql();

    account.set_id(document.getObjectId("_id").toString());
    account.setAccountNumber(document.getLong(ACCOUNT_NUMBER_COL));
    account.setCustomerNumber(document.getLong("customerNumber"));
    account.setCustomerName(document.getString("customerName"));
    account.setAccountStatus(AccountStatus.valueOf(document.getString("accountStatus")));

    // @TODO 2023-02-01 TOKU: Is this official approach how to get BigDecimal from db?
    account.setBalance((document.get("balance", Decimal128.class)).bigDecimalValue());

    return account;
  }
}
